



			 CHECK USB DEVICE NAMES NOW !!!

&    from serial import *
&    from serial.tools.list_ports import comports
&    ports = comports()
&    print("\nAvailable serial ports:")
&    for port in ports:
&        if (port.device.find("usbmodem") != -1):
&            print("   " + port.device + " " + port.description)
&    print("\n")


		  THEN UPDATE THE CODE IN THE RELEVANT PLACES

~




				DAT505 - PYTHON
			         Communication

				      by

				 Dr Simon Lock

~
OVERVIEW


    In this lecture we are going to take a look at data communication:

	o  USB Serial

	o  Data transfer protocols

	o  Hyper Text Transfer Protocol (HTTP)

	o  Message Queuing Telemetry Transport (MQTT)

~
PYSERIAL LIBRARY


    PySerial allows serial communication for a number of purposes:

  	o  Communication between different computers (e.g. Raspberry PIs)

  	o  Communication between computers and sensor devices

    Of particular interest to us is communication with Arduino boards

    We may also see a glimpse of a Python alternative to Arduino !
 
~
ARDUINO SERIAL COMMS


    Import required libraries
&	from serial import *

    Open port by name (different for each device) at a speed of 9600
&	port = Serial("/dev/cu.usbmodem1411",9600,timeout=2) 

    Clear any previous old data waiting in the buffer
&	port.readall()

    Write out a string to the serial port
&	message = "Hello there Arduino\n"
&	port.write(message.encode())
&	print("You just said: Hello there Arduino")

    Read back in and print the response from the serial port, then close it
&	input = port.readline()
&	print("Arduino replied: " + input)
&	port.close()

~
ARDUINO CODE


    The Arduino code for this looks like the following:

%	res/ArduinoEcho/ArduinoEcho.ino

~
MICROBIT SERIAL COMMS


    Import required libraries
&	from serial import *

    Open port by name (different for each device) at a speed of 115200
&	port = Serial("/dev/cu.usbmodem1422",115200,timeout=2) 

    Clear any previous old data waiting in the buffer
&	port.readall()

    Write out a string to the serial port
&	message = "Hello there Microbit\n"
&	port.write(message.encode())
&	print("You just said: Hello there Microbit")

    Read back in and print the response from the serial port, then close it
&	input = port.readline()
&	print("Microbit replied: " + input)
&	port.close()

~
MICROBIT CODE


    The Microbit code for this looks like the following:

%	res/MicrobitEcho/MicrobitEcho.py

~
INSTALLING SERIAL LIB


  The Python Serial libraries are already installed on the Rasp Pi

  If you are on another platform and have pip, you can install with:

	pip install pyserial

  If you don't have pip, you could try easy_install:

	easy_install install -U pyserial

  Otherwise, you can manually get the library from:

%	https://pypi.python.org/pypi/pyserial

  Download the "source" version, unzip it, cd into the folder and run:

	python setup.py install --user

  This will install the necessary libraries and drivers for you

~
INVENTING SIMPLE SERIAL PROTOCOLS


  o  You might have heard of Firmata ?

  o  You might used it in the past for communicating with Arudino

  o  There is a Python client for Firmata

  o  But we won't be using that :op

  o  It's not always reliable, plus we learn more by working at a lower level

  o  In this module we will be creating our own simple protocols for comms

~
IPHONOGRAPH CASE STUDY


  o  The iPhonograph is an "apparently" vintage music player

%			res/iphonograph.jpg

  o  It has three "cylinders", with 7 music tracks on each

  o  Various switches, sliders & buttons allow selection and playback of music

  o  A light indicates the current playback state (playing or stopped)

  o  Hidden inside the wood and brass exterior is:

	- An Arduino (to sense from the input controls)

	- A Raspberry Pi (to play back digital music)

  o  Software is written in Python and the Arduino "Wiring" language

  o  Communication is via USB serial
  
~
IPHONOGRAPH CONTROLS


  o  The slider on the side selects the track from 1 to 7

  o  The three-way switch selects which "cylinder" to play from:

			Left    Middle    Right

  o  A button inside the bellows is used to increase volume

  o  The lamp is switched on or off depending on playback state

~
PROTOCOL DESIGN EXERCISE


  o  What protocol can we use to communicate between Pi and Arduino ?

  o  What characters can we send (in both directions) to make it work ?

>	- Changing the slider sends a single number (1-7)

>	- The Cylinder switch sends letter: Left (L)  Middle (M)  Right (R)

>	- The volume button sends a single letter "B"

>	- If a "1" is sent to the Arduino, the lamp is switched on

>	- If a "0" is sent, the lamp is switched off

>  o  The Arduino is constantly sensing, but only sends changes in state

>  o  This minimises the amount of serial communication

>  o  As well as the amount of work the Raspberry PI has to do

~
IPHONOGRAPH PYTHON CODE

&	from serial import *
&	track = "None"
&	cyl = "None"
&	countdown = 0
&	ser = Serial("/dev/cu.usbserial-A4001L1w",9600,timeout=2) 
&	while (track != "1"):
&	    command = ser.read()
&	    if (command != "") and (command != "\n"):
&	        ser.read()
&	        if(command == "B"): print("Increase Volume !!!")
&		else:
&	            if(command == "L"): cyl = "LEFT"
&	            elif(command == "M"): cyl = "MIDDLE"
&	            elif(command == "R"): cyl = "RIGHT"
&	            else: track = command
&		    print("Playing track " + track + " on " + cyl + " cylinder")
&	            ser.write("1".encode())
&	            countdown = 5;
&	    if(countdown <= 0): ser.write("0".encode())
&	    else: countdown-=1
&	ser.write("0".encode())
~
ARDUINO CODE


    The Arduino side of things isn't really part of this module

    If you're interested in what this code looks like, take a look here:

%	res/iPhonograph.txt

    Could be useful in you projects !

~
HTTP


  o  HTTP is not that dissimilar to the simple protocol we have just seen

  o  The command set is maybe more complicated and more data is being shifted

  o  But it's just another protocol

  o  To help us use it, Python provides us with a simplified API

  o  This prevents us from having to deal with the low-level complexity

~
URLLIB


  o  Confusingly, there are two HTTP libraries <U>urllib</U> and <U>urllib2</U>

  o  These aren't just different versions - they do different things !

  o  Chances are that you are going to need both of them

  o  There is another very good library called <U>Requests</U>

>  o  But using that would make everything far too easy ;o)

~
URLLIB GET EXAMPLE


    Import the required libraries
&	import urllib2
&
    Open the desired URL
&	response = urllib2.urlopen("http://store.apple.com/uk/mac")

    Read the response returned by the server
&	html = response.read()

    Print out the last 300 characters
&	print(html[-300:])

~
A MORE USEFUL EXAMPLE


    Import the required libraries
&	import urllib2, urllib
&
    Create a query string and then search for that string on Flickr
&	query = "text=" + urllib.quote("fluffy kitten")
&	response = urllib2.urlopen("http://www.flickr.com/search/?" + query)

    Read the response returned by the server
&	html = response.read()

    Get the start and end points of the first image URL
&	start = html.find("url(//") + 6
&	end = html.find(")",start)

    Print out the image URL
&	print(html[start:end])

    Open up the image
&	subprocess.Popen(["open","http://"+html[start:end]])

~
<R>THOUGHT EXERCISE</R>


    What else could you do with this HTTP functionality ?
<?>
>	Grab photo from webcam and "Search by image" on a web search engine

>	Upload images onto flickr

>	Upload videos onto Vimeo or YouTube

>	Integration with auction sites (e.g. Ebay)

>	Integration with online web-form systems

>	Denial of Service attacks on e-commerce sites
</?>

~
REALLY SMALL MESSAGE BROKER


  o  The Really Small Message Broker (RSMB) is a server that supports realtime
     communication between distributed peers

  o  Communication takes the form of messages multicast to interested parties

  o  You can register interest in a particular <U>topic</U>

  o  Any messages regarding that topic are forwarded to you

  o  You can publish messages on a topic, which are then forwarded to others

  o  Communication with broker is achieved using MQ Telemetry Transport (MQTT)

~
IBM


  o  RSMB is developed by IBM and is available on many platforms (except Pi)

  o  It is part of the infrastructure provided in IBM Smarter Planet Lab

  o  There is also an open-source implementation of RSMB called Mosquitto

  o  This will run quite happily on the Raspberry Pi :o)

  o  Although you probably won't need to as IBM RSMB runs on the lab machines

  o  Just run the "run-broker" script in a terminal:

%			res/MQTT/run-broker.sh

  o  We can leave this running in the background and it will log all activity

~
WMQTT UTILITY


  o  To help with debugging, there is a useful utility called WMQTT:

%			res/MQTT/run-utility.jar

  o  This allows us to:

	- Connect to the broker

	- Subscribe to particular topics

	- Publish messages on a topic


  o  Let's connect to the broker and subscribe for the "/simon/random" topic
     (we are going to need it for the next example !)

  o  Check the log messages from the broker when connecting and subscribing

~
PYTHON MQTT CLIENT


  If you have pip, you can install the Python MQTT client with:

	pip install mosquitto

  If you don't have pip, you could try easy_install:

	easy_install install -U pyserial

  Otherwise, you can manually get the library from:

%		http://mosquitto.org/download/

  If you only need the Python client (i.e. not the broker itself) you can
  download the source archive, unzip it and run setup.py in lib/python:

		python setup.py install --user

  Even easier: just copy the mosquitto.py file to your project folder !

~
PYTHON PUBLISH


    Import the required libraries
&	from mosquitto import *
&	from random import *

    Create a client wrapper (must be a unique name)
&	client = Mosquitto("DAT205")

    Connect to the broker (in this case the local one)
&	client.connect("127.0.0.1")

    Generate a random floating point number
&	number = random()

    Print out the random number
&	print("About to send " + str(number))

    Publish the random number to the "simon/random" topic
&	client.publish("/simon/random", str(number))

~
PYTHON SUBSCRIBE


    Begin as before
&	from mosquitto import *
&	client = Mosquitto("DAT205")
&	client.connect("127.0.0.1")

    Subscribe to the "/simon/test" topic
&	client.subscribe("/simon/test")

    Write a function to handle the incoming message
&	def messageReceived(broker, obj, msg):
&	    global client
&	    payload = msg.payload.decode()
&	    print("Message " + msg.topic + " containing: " + payload)
&	    client = None

    Register the incoming message handler
&	client.on_message = messageReceived

    While the client still exists, ask it to process incoming messages
&	while (client != None): client.loop()
~
PRACTICAL


    <R>You will need your Arduino this week - better bring it to the practical</R>

    This week we are going to build a distributed, synchronised LED lightshow !
    You will make use of a hardware prototyping platform (Arduino or Microbit)
    First write some code that switches on and off the onboard LEDs
    Then invent a protocol to control the LEDs from your computer with Python.

    Write some Python that connects to the RSMB broker.
    This code should subscribe to the "/lights" topic and control the LEDs:

      o  When the payload of an incoming message is "ON" switch the LEDs on
      o  When the payload of an incoming message is "OFF" switch the LEDs off

    If everything works correctly, we should be able to control all the
    LEDs in the room by publishing messages to the broker...

~
ARCHITECTURE


    The overall architecture is a simple chain of communication:


%				res/mqtt.png


    It is important to do each week's practical work during that week.
    Remember - they will form part of your assessed portfolio.
